2.1 支持负数的版本
(define (make-rat x y)
  (let ((g (gcd x y)))
    (if (< (/ x y) 0)
      (cons (/ (- x) g) (/ y g))
      (cons (/ x g) (/ y g)))))

2.2 计算中点，定义点...定义线段。。

(define (print-point p)
	(newline)
	(display "(")
	(display (x-point p))
	(display ",")
	(display (y-point p))
  (display ")")
)
(define (start-segment line)
	(car line)
)
(define (end-segment line)
	(cdr line)
)
(define (make-segment start-point end-point)
	(cons start-point end-point)
)
(define (x-point point)
	(car point)
)
(define (y-point point)
	(cdr point)
)
(define (make-point x y)
	(cons x y)
)
(define (midpoint-segment line)
	(make-point
		(/ (+ (x-point (start-segment line)) (x-point (end-segment line))) 2)
		(/ (+ (y-point (start-segment line)) (y-point (end-segment line))) 2)
	)
)

2.3 矩阵周长面积
  上一道题已经定义了线段了
(define (make-rect left-top-point right-bottom-point)
	(cons left-top-point right-bottom-point)
)
(define (one-line rect)
	(abs (- (x-point (car rect)) (x-point (cdr rect))))
)
(define (another-line rect)
	(abs (- (y-point (car rect)) (y-point (cdr rect))))
)
(define (cal-p rect)
	(* (+ (one-line rect) (another-line rect)) 2)
)
(define (cal-a rect)
	(* (one-line rect) (another-line rect))
)
(cal-p (make-rect (make-point 1 4) (make-point 2 7)))
(cal-a (make-rect (make-point 1 4) (make-point 2 7)))

2.4

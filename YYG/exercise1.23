#lang sicp
 (define (prime? n) (= (smallest-divisor n 2) n) )



(define (smallest-divisor n m)
  (cond ((> (* m m) n) n)
        ((= (remainder n m) 0) m)
        (else (smallest-divisor n (next m)))))


(define (next m)
  (cond ((= m 2) 3)
        (else (+ m 2))))

(define (time-prime?2 n) (time-prime? n (runtime)))

(define (time-prime? n m)

  (if (prime? n) (display2 (- (runtime) m) n)
      (+ 1 1)))

(define (display2 usedtime thenumber)(display "the number is ")(display thenumber) (display " ")(display usedtime) (display " used " ) )



(define (pick-prime begin end starttime)
  (cond ((> begin end) (display (- (runtime) starttime)))
        (else (time-prime?2 begin) (pick-prime (+ begin 1) end starttime))))


(pick-prime 1000 10000 (runtime))

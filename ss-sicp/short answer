1.4 -----------------------------------------------
当b大于0，A-plus-abs-b= a+b;反之，b<0,a-plus-abs-b=a-b.
1.15---------------------------------------
p的使用次数n取决于a多少次除以3才能小于或者等于0.1
（1）.5次
（2）. 0<a<0.1*3^n
Log3(10a)<n ,n为整数
1.1---------------------------------------------
10
12
8
3
6
19
#f
4
16
6
16
1.2-----------------------------------------
(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5))))) (* 3 (- 6 2) (- 2 7)))
1.20--------------------------------------------
(define (gcd a b)
(if (= b 0)
a
(gcd b (reminder a b))))
(gcd 206 40)
(gcd 40 (reminder 206 40))
(gcd (reminder 206 40) (reminder 40 (reminder 206 40)))
(gcd (reminder 40 (reminder 206 40)) (reminder (reminder 206 40) (reminder 40 (reminder 206 40))))
(gcd (reminder (reminder 206 40) (reminder 40 (reminder 206 40)))  (remind (reminder 40 (reminder 206 40))  (reminder (reminder 206 40) (reminder 40 (reminder 206 40))))
.......
(gcd 40 6)
(gcd 6 4)
(gcd 4 2)
(gcd 2 0)
正则序 reminder 11次
应用序 reminder 4次
--------------------------------------------------------------------------1.25
一个数的幂对另一个数取模的过程
(define (expmod base exp m)
(cond ((= exp 0) 1)
((even?  exp)
(remainder  (square (expmod base (/ exp 2) m))  m))
(else 
(remainder  (* base (expmod  base  (- exp 1)  m))  m))))
(define (fast-expt b n)
(cond ((= n 0) 1)
((even? n)  (square (fast-expt  b (/ n 2))))
(else (* b  (fast-expt  b  (- n 1))))))
----------------------------------------------------------------------
(define ( expmod base exp m)
(remainder (fast-expt base exp ) m))
当exp=0时
fast-expt运算一次 remainder 运算一次 
expmod直接返回
当exp不为0时
fast-expt先循环算出乘积，最后进行一次remainder运算
expmod remainder的次数多些, 每一个循环进行remainder运算
当费马检测对一个很大的数进行素数检测时（10000000的10000000次幂）
fast-expt会运算非常慢
而expmod通过remainder将乘幂限制在一个很小的范围内（不会超过m）计算速度快很多
所以Alyssa的函数运行不理想
-------------------------------------------------------------------1.26
使用square和直接使用乘法 计算量不相同 
每次当 exp 为偶数时， Louis 的 expmod 过程的计算量就会增加一倍，
因此原本 Θ(logn) 的计算过程变成了 Θ(n)

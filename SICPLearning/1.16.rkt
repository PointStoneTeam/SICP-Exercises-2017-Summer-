#lang scheme
(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))
(define (even? n)
  (= (remainder n 2) 0))
(define (square n)
  (* n n))
(fast-expt 1 1)
(define (expt-faster b n)
  (expt-iter b n 1))
(define (expt-iter b n a)
  (cond ((= n 0)
         a)
         ((even? n)
          (expt-iter (square b) (/ n 2) a))
         ((odd? n)
          (expt-iter b (- n 1) (* b a)))))
  
(expt-faster 1 1)  
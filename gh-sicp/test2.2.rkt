#lang racket
(define (make-segment a b) (cons a b))
(define (start-segment a) (car a))
(define (end-segment b) (cdr b))
(define (make-point x y) (cons x y))
(define (x-point point) (car point))
(define (y-point point) (cdr point))
(define (midpoint-segment l)
  (make-point (/ (+ (x-point(start-segment l)) (x-point(end-segment l))) 2)
              (/ (+ (y-point(start-segment l)) (y-point(end-segment l))) 2)))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ".")
  (display (y-point p))
  (display ")"))
(midpoint-segment (make-segment (make-point 3 5) (make-point 4 7)))
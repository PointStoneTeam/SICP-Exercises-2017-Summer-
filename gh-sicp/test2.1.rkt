#lang racket
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
(define (make-rat n d)
  (let ((g (gcd n d)))
    (if (< d 0)
    (cons (/ (- n) g) (/ (- d) g))
    (cons (/ n g) (/ d g)))))
(define (gcd a b)
  (cond ((and (> a 0) (> b 0)) (gcd b (remainder a b)))
        ((and (> a 0) (< b 0)) (gcd (- b) (remainder a (- b))))
        ((and (< a 0) (> b 0)) (gcd b (remainder (- a) b)))
        ((and (< a 0) (< b 0)) (gcd (- b) (remainder (- a) (- b))))
        ((= b 0)
         a)))
(make-rat 5 -3)
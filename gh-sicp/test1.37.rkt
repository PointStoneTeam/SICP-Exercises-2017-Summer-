#lang racket
(define (cont-frac n d k)
  (define (cf i)
    (if (= k i)
        (/ (n k) (d k))
        (/ (n i)
           (+ (d i) (cf (+ i 1))))))
  (cf 1))
(cont-frac (lambda (n) 1.0)
           (lambda (d) 1.0)
           11)
(define (cont-frac-next n d k)
  (define (iter i result)
    (if (= i 0)
        result
        (iter (- i 1)
              (/ (n i)
                 (+ (d i) result)))))
  (iter (- k 1)
        (/ (n k) (d k))))
(cont-frac-next (lambda (n) 1.0)
                (lambda (d) 1.0)
                11)
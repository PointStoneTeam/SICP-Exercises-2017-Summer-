#lang racket
(define (newton-transform f)
  (lambda (x)
    (- x (/ (f x) ((deriv f) x)))))
(define (deriv f)
  (lambda (x)
    (/ (- (f (+ x dx)) (f x))
       dx)))
(define dx 0.00001)
(define (cube x)
  (* x x x))
(define (sqrt x)
  (* x x))
(define (newtons-method f guess)
  (fixed-point (newton-transform f) guess))
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(define tolerance 0.000001)
(define (cubic a b c)
  (lambda (x)
    (+ (cube x) (* a (sqrt x)) (* b x) c)))
(newtons-method (cubic 3 2 1) 1)
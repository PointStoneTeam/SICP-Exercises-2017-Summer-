(define (fast-expt b n)
  (fast-expt-iter b n 1))
(define (fast-expt-iter b n a)
    ( cond ((= n 0) 
			 a)
	       ((even n)
			 (fast-expt-iter (squre b) (/ n 2) a))
		   ((odd n)
			 (fast-expt-iter b (- n 1) (* a b)))))
(define (even n)
  (= (remainder n 2) 0))
(define (odd n)
  (= (remainder n 2) 1))
(define (squre n)
  (* n n))
(define (expt-fast b n)
  (cond ((= n 0) 
		 1)
		((even n)
		 (squre (expt-fast b (/ n 2))))
	    (else (* b (expt-fast b (- n 1))))))

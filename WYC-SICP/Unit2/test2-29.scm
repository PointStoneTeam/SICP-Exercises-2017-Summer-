(define (make-mobile left right)
  (list left right))
(define (make-branch length structure)
  (list length structure))
;a)
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (cadr monile))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (cadr branch))
;b)
(define (left-son mobile) (branch-structure (left-branch mobile)))
(define (right-son mobile) (branch-structure (right-branch mobile)))
(define (total-weight mobile)
  (if (not (pair? mobile))
      mobile
      (+ (total-weight (left-son mobile)) 
         (total-weight (right-son mobile)))))
;c)
(define (left-length mobile) (branch-length (left-branch mobile)))
(define (right-length mobile) (branch-length (right-branch mobile)))
(define (balance mobile)
  (cond ((not (pair? mobile)) #t)
        ((and (balance (left-son mobile)) (balance (right-son mobile))) 
         (= (* (left-length mobile) (total-weight (left-son mobile))) 
            (* (right-length mobile) (total-weight (right-son mobile)))))
        (else (= 0 1))))
;d)
;只要改一下选择函数就好啦！   

(define (make-interval a b) (cons a b))
(define (upper-bound x) (cdr x))
(define (lower-bound x) (car x))

(define (add-interval x y)
    (make-interval (+ (lower-bound x) (lower-bound y))
                   (+ (upper-bound x) (upper-bound y))))
(define (sub-bound x y)
    (add-interval x
                  (make-interval (- 0 (upper-bound y))
                                 (- 0 (lower-bound y)))))
(define (mul-interval x y)
    (let ((p1 (* (lower-bound x) (lower-bound y)))
          (p2 (* (lower-bound x) (upper-bound y)))
          (p3 (* (upper-bound x) (lower-bound y)))
          (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
(define (div-interval x y)
  (if (> (* (upper-bound y) (lower-bound y)) 0)
  (mul-interval
    x
    (make-interval (/ 1.0 (upper-bound y))
                   (/ 1.0 (lower-bound y))))
  (display "error!")))

(define (make-center-percent c p)
    (let ((per) (/ p 100))
     (make-interval (* c (- 1 (per p))) (* c (+ 1 (per p))))))
(define (center i)
    (/ (+ (lower-bound i) (upper-bound i)) 2))
(define (percent i)
    (* 100 (/ (- (center i) (lower-bound i)) (center i))))
